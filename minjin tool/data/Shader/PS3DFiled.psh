#define g_iNumLight  1

Texture2D g_txAlpha		: register(t0);
Texture2D g_txDiffuse	: register(t1);
Texture2D g_txNormal	: register(t2);
Texture2D g_txDiffuse2	: register(t3);
Texture2D g_txNormal2	: register(t4);

SamplerState s0 : register(s0);

cbuffer cb0 : register(b0) // constant buffer name : register (empty : num)
{
	matrix	g_matView;
	matrix	g_matProj;
	float3	g_EyePos;
	float	width;
	float3	g_EyeDir;
	float	height;
};

cbuffer cb1 : register(b1) // constant buffer name : register (empty : num)
{
	float3	m_ObjectColor	 : packoffset(c0);
	int		m_isAlpha		 : packoffset(c0.w);
	float2	m_WorldSize		 : packoffset(c1);
	int2	m_isDiffuse		 : packoffset(c1.z);
	int2	m_isNormal		 : packoffset(c2);
	float2	temtmep			 : packoffset(c2.z);
};

cbuffer cb2 : register(b2) // constant buffer name : register (empty : num)
{
	matrix  g_InvMatrix;
	float4	g_Lightpos; // 월드 좌표xyz 거리w
	float4	g_LightDir; // 방향 xyz, 세기w
	float3	g_LightColor;
	float	g_fInner;	// 스팟의 내부콘
	float	g_fOutner;	// 스팟의 외부콘
	float	g_fOffset; // 원의 거리에 따른 감쇠에서의 오프셋
	int		g_iFlag;
	float	c1temd;
};

struct PS3D_INPUT // 444 please
{
	float4 Position				: SV_POSITION;
	float3 UVPos				: TEXCOORD0;
	float3 Normal				: NORMAL;
	float3 WorldPosition		: POSITION0;
	float3 vLight[g_iNumLight]	: TEXCOORD2;
};

float3 ComputeLight(float3 Pos, float3 Normal)
{
	float3 LastColor = float3(0, 0, 0); // 결과값 초기화
	switch (g_iFlag)
	{
	case 0: // SPOT
	{
		float4 LightVector;
		LightVector.w = distance(Pos, g_Lightpos.xyz); // 거리체크
		if (LightVector.w > g_Lightpos.w) // 거리체크
		{
			break;
		}
		else if (LightVector.w > g_fOffset)
		{
			float fLuminance = smoothstep(g_Lightpos.w, g_Lightpos.w - g_fOffset, LightVector.w);
			LightVector.xyz = normalize(Pos.xyz - g_Lightpos.xyz); // 라이트벡터 방향 구하기
			float fDot = dot(Normal, -LightVector.xyz);
			LastColor.x += fDot * g_LightColor.x * fLuminance;
			LastColor.y += fDot * g_LightColor.y * fLuminance;
			LastColor.z += fDot * g_LightColor.z * fLuminance;
		}
		else
		{
			LightVector.xyz = normalize(Pos.xyz - g_Lightpos.xyz); // 라이트벡터 방향 구하기
			float fDot = dot(Normal, -LightVector.xyz);
			LastColor.x += fDot * g_LightColor.x;
			LastColor.y += fDot * g_LightColor.y;
			LastColor.z += fDot * g_LightColor.z;
		}
		break;
	}
	case 1: // SKY
	{
		float fDot = dot(Normal, -g_LightDir.xyz);
		LastColor.x += fDot * g_LightColor.x;
		LastColor.y += fDot * g_LightColor.y;
		LastColor.z += fDot * g_LightColor.z;
		break;
	}
	case 2: // DIRECT
	{
		break;
	}
	case 3: // OMNI
	{
		float3 vLight = normalize(Pos - g_Lightpos.xyz);
		float fDistance = distance(Pos, g_Lightpos.xyz);
		float fLuminance = smoothstep(fDistance - g_fOffset, fDistance, g_Lightpos.w);
		float3 normal = Normal;
		float fIntensity = saturate(dot(Normal, -vLight));
		LastColor += float3(g_LightColor.rgb *  fLuminance * fIntensity);
		break;
	}
	}
	LastColor = max(LastColor, float3(0, 0, 0));
	return LastColor;
}

float NormalMapping(float3 LightVector, float3 NormalMapPixel)
{
	NormalMapPixel *= 2;
	NormalMapPixel -= 1;

	float fDot = dot(LightVector, NormalMapPixel);
	return fDot;
}

float4 PS(PS3D_INPUT data) : SV_TARGET
{
	float4 lastcolor;
	float4 layer1 = g_txDiffuse.Sample(s0, data.UVPos.xy) * max(float4(0.1f, 0.1f, 0.1f, 1.0f), float4(ComputeLight(data.WorldPosition, data.Normal), 1));
	float2 uv = (float2(data.WorldPosition.x, data.WorldPosition.z) + (m_WorldSize / 2)) / m_WorldSize;
	float4 alpha = g_txAlpha.Sample(s0, uv);
	float4 layer2 = g_txDiffuse2.Sample(s0, data.UVPos.xy) * max(float4(0.1f, 0.1f, 0.1f, 1.0f), float4(ComputeLight(data.WorldPosition, data.Normal), 1));
	lastcolor = (layer1 * (1 - alpha.x)) + (layer2 * alpha.x);
	lastcolor.w = 1;
	return lastcolor;

	// --------------------------
	if (m_isDiffuse.x == -1)
	{
		float4 Diffusecolor = g_txDiffuse.Sample(s0, data.UVPos.xy) * max(float4(0.1f, 0.1f, 0.1f, 1.0f), float4(ComputeLight(data.WorldPosition, data.Normal), 1));
		layer1 = Diffusecolor;
		if (m_isNormal.x == -1)
		{
			float4 Nomarlcolor = g_txNormal.Sample(s0, data.UVPos.xy);
			float normal = 0.0;
			for (int i = 0; i < g_iNumLight; i++)
			{
				normal += NormalMapping(data.vLight[i], Nomarlcolor.xyz);
			}
			layer1 *= normal;
		}
		lastcolor = layer1;
	}
	else
	{
		float4 mutiplier = float4(0.3f, 0.3f, 0.3f, 1.0f) + float4(ComputeLight(data.WorldPosition, data.Normal), 1);
		layer1.xyz = m_ObjectColor * mutiplier.xyz;
		lastcolor = layer1;
	}

	if (m_isAlpha == -1)
	{
		float2 uv = (float2(data.WorldPosition.x, data.WorldPosition.z) + (m_WorldSize / 2)) / m_WorldSize;
		float4 alpha = g_txAlpha.Sample(s0, uv);
		if (m_isDiffuse.y == -1)
		{
			float4 Diffusecolor = g_txDiffuse.Sample(s0, data.UVPos.xy) * max(float4(0.1f, 0.1f, 0.1f, 1.0f), float4(ComputeLight(data.WorldPosition, data.Normal), 1));
			layer2 = Diffusecolor;
			if (m_isNormal.y == -1)
			{
				float4 Nomarlcolor = g_txNormal.Sample(s0, data.UVPos.xy);
				float normal = 0.0;
				for (int i = 0; i < g_iNumLight; i++)
				{
					normal += NormalMapping(data.vLight[i], Nomarlcolor.xyz);
				}
				layer2 *= normal;
			}
			lastcolor = (lastcolor * -alpha.x) + (layer2 * alpha.x);
		}
	}


	lastcolor.w = 1;
	return lastcolor;
}
